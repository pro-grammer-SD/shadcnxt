export declare namespace pragma {
    namespace JSX {
        type EmptyElementTagName = (keyof HTMLElementTagNameMap) & ('area' | 'base' | 'br' | 'col' | 'embed' | 'hr' | 'img' | 'input' | 'link' | 'meta' | 'param' | 'source' | 'track' | 'wbr');
        interface ElementChildrenAttribute {
            children: {};
        }
        interface HTMLAttributes {
            accesskey?: string;
            class?: string;
            contenteditable?: boolean | 'true' | 'false' | 'inherit';
            contextmenu?: string;
            dir?: string;
            draggable?: boolean | 'true' | 'false';
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellcheck?: boolean | 'true' | 'false';
            style?: string;
            tabindex?: number;
            title?: string;
            translate?: 'yes' | 'no';
            radiogroup?: string;
            role?: string;
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | 'false' | 'true';
            'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both';
            'aria-busy'?: boolean | 'false' | 'true';
            'aria-checked'?: boolean | 'false' | 'mixed' | 'true';
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time';
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | 'false' | 'true';
            'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup';
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | 'false' | 'true';
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | 'false' | 'true';
            'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog';
            'aria-hidden'?: boolean | 'false' | 'true';
            'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling';
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: 'off' | 'assertive' | 'polite';
            'aria-modal'?: boolean | 'false' | 'true';
            'aria-multiline'?: boolean | 'false' | 'true';
            'aria-multiselectable'?: boolean | 'false' | 'true';
            'aria-orientation'?: 'horizontal' | 'vertical';
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | 'false' | 'mixed' | 'true';
            'aria-readonly'?: boolean | 'false' | 'true';
            'aria-relevant'?: 'additions' | 'additions text' | 'all' | 'removals' | 'text';
            'aria-required'?: boolean | 'false' | 'true';
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | 'false' | 'true';
            'aria-setsize'?: number;
            'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other';
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autocapitalize?: string;
            autocorrect?: string;
            autosave?: string;
            color?: string;
            itemprop?: string;
            itemscope?: boolean;
            itemtype?: string;
            itemid?: string;
            itemref?: string;
            results?: number;
            security?: string;
            unselectable?: 'on' | 'off';
            inputmode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
            is?: string;
        }
        type Properties<T extends keyof HTMLElementTagNameMap> = {
            readonly [K in keyof Omit<HTMLElementTagNameMap[T], 'children' | keyof HTMLAttributes>]?: HTMLElementTagNameMap[T][K] extends (string | boolean | number) ? HTMLElementTagNameMap[T][K] : never;
        } & {
            readonly toString: () => string;
            readonly children?: T extends EmptyElementTagName ? never : (string | string[]);
        } & HTMLAttributes;
        type IntrinsicElements = {
            [T in keyof HTMLElementTagNameMap]: Properties<T>;
        };
    }
}
export declare function pragma<T extends keyof pragma.JSX.IntrinsicElements>(tagName: T, properties?: pragma.JSX.Properties<T>, ...children: pragma.JSX.ElementChildrenAttribute['children'][]): string;
//# sourceMappingURL=index.d.ts.map